import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Load and preprocess data
data = pd.read_csv('stock_prices.csv')['Close'].values.reshape(-1, 1)
scaler = MinMaxScaler(feature_range=(0, 1)).fit(data)
data = scaler.transform(data)

# Create sequences
X, y = [], []
for i in range(len(data) - 10):
    X.append(data[i:i + 10])
    y.append(data[i + 10])

X, y = np.array(X), np.array(y)

# Split data
train_size = int(len(X) * 0.8)
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

# Define and compile model
model = Sequential([LSTM(50, return_sequences=True, input_shape=(10, 1)),LSTM(50), Dense(1)])
model.compile(optimizer='adam', loss='mean_squared_error')

# Train model
model.fit(X_train, y_train, epochs=10, batch_size=32)

# Evaluate model
print("Training Loss:", model.evaluate(X_train, y_train))
print("Test Loss:", model.evaluate(X_test, y_test))

# Plot actual vs predicted prices
plt.plot(y_test, color='blue', label='Actual Prices')
plt.plot(model.predict(X_test), color='red', label='Predicted Prices')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()
